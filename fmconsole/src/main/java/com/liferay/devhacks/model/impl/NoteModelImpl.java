package com.liferay.devhacks.model.impl;

import com.liferay.devhacks.model.Note;
import com.liferay.devhacks.model.NoteModel;
import com.liferay.devhacks.model.NoteSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Note service. Represents a row in the &quot;Templates_Note&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.devhacks.model.NoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoteImpl}.
 * </p>
 *
 * @author James Falkner
 * @see NoteImpl
 * @see com.liferay.devhacks.model.Note
 * @see com.liferay.devhacks.model.NoteModel
 * @generated
 */
@JSON(strict = true)
public class NoteModelImpl extends BaseModelImpl<Note> implements NoteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a note model instance should use the {@link com.liferay.devhacks.model.Note} interface instead.
     */
    public static final String TABLE_NAME = "Templates_Note";
    public static final Object[][] TABLE_COLUMNS = {
            { "name", Types.VARCHAR },
            { "note", Types.VARCHAR },
            { "noteId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Templates_Note (name VARCHAR(75) null,note VARCHAR(75) null,noteId LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table Templates_Note";
    public static final String ORDER_BY_JPQL = " ORDER BY note.noteId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Templates_Note.noteId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.devhacks.model.Note"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.devhacks.model.Note"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.devhacks.model.Note"));
    private static ClassLoader _classLoader = Note.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Note.class };
    private String _name;
    private String _note;
    private long _noteId;
    private Note _escapedModel;

    public NoteModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Note toModel(NoteSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Note model = new NoteImpl();

        model.setName(soapModel.getName());
        model.setNote(soapModel.getNote());
        model.setNoteId(soapModel.getNoteId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Note> toModels(NoteSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Note> models = new ArrayList<Note>(soapModels.length);

        for (NoteSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _noteId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setNoteId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _noteId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Note.class;
    }

    @Override
    public String getModelClassName() {
        return Note.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("name", getName());
        attributes.put("note", getNote());
        attributes.put("noteId", getNoteId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        Long noteId = (Long) attributes.get("noteId");

        if (noteId != null) {
            setNoteId(noteId);
        }
    }

    @JSON
    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @JSON
    @Override
    public long getNoteId() {
        return _noteId;
    }

    @Override
    public void setNoteId(long noteId) {
        _noteId = noteId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Note.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Note toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Note) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        NoteImpl noteImpl = new NoteImpl();

        noteImpl.setName(getName());
        noteImpl.setNote(getNote());
        noteImpl.setNoteId(getNoteId());

        noteImpl.resetOriginalValues();

        return noteImpl;
    }

    @Override
    public int compareTo(Note note) {
        long primaryKey = note.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Note)) {
            return false;
        }

        Note note = (Note) obj;

        long primaryKey = note.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Note> toCacheModel() {
        NoteCacheModel noteCacheModel = new NoteCacheModel();

        noteCacheModel.name = getName();

        String name = noteCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            noteCacheModel.name = null;
        }

        noteCacheModel.note = getNote();

        String note = noteCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            noteCacheModel.note = null;
        }

        noteCacheModel.noteId = getNoteId();

        return noteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{name=");
        sb.append(getName());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", noteId=");
        sb.append(getNoteId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.liferay.devhacks.model.Note");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>noteId</column-name><column-value><![CDATA[");
        sb.append(getNoteId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
